from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery
from keyboards import (main_keyboard, films_keyboard, serials_keyboard,
                       choise_keyboard, viewed_keyboard, get_favorite_media)
from models import Films, Session, Serials, User, WatchedFilms, WatchedSerials
from sqlalchemy import func
from sqlalchemy.future import select
from datetime import datetime

router = Router()


#------------------–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ —Å –∫–æ–º–∞–Ω–¥—ã /start----------------------
@router.message(CommandStart())
async def command_start(message: Message) -> None:
    async with Session() as session:
        async with session.begin():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            stmt = select(User).filter_by(id_user=str(message.from_user.id))
            result = await session.execute(stmt)
            user = result.scalars().first()

            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
            if not user:
                user = User(id_user=str(message.from_user.id))
                session.add(user)
                await session.commit()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è

    await message.answer(f"üé¨ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ñ–∏–ª—å–º—ã –∏ —Å–µ—Ä–∏–∞–ª—ã. ",
                         reply_markup=main_keyboard())


#------------------–í—ã–±–æ—Ä —Ñ–∏–ª—å–º–∞/—Å–µ—Ä–∏–∞–ª–∞----------------------
@router.message(F.text == '–í—ã–±–æ—Ä —Ñ–∏–ª—å–º–∞/—Å–µ—Ä–∏–∞–ª–∞ üì∫')
async def command_start_handler(message: Message) -> None:
    await message.answer(f"–í—ã–±–µ—Ä–∏, —á—Ç–æ –±—É–¥–µ—à—å —Å–º–æ—Ç—Ä–µ—Ç—å, –∏ —è –Ω–∞–π–¥—É –¥–ª—è —Ç–µ–±—è —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ! üì∫üçø",
                         reply_markup=choise_keyboard())


#------------------–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π----------------------
@router.message(F.text == '–ü—Ä–æ—Ñ–∏–ª—åüë§')
async def get_profile_user(message: Message):
    async with Session() as session:
        async with session.begin():
            stmt = select(WatchedFilms).where(
                (WatchedFilms.id_user == str(message.from_user.id)) & (WatchedFilms.watched == True))
            result = await session.execute(stmt)
            films = result.scalars().all()
            stmt = select(WatchedSerials).where(
                (WatchedSerials.id_user == str(message.from_user.id)) & (WatchedSerials.watched == True))
            result = await session.execute(stmt)
            serials = result.scalars().all()
            stmt = select(WatchedFilms).where(
                (WatchedFilms.id_user == str(message.from_user.id)) & (WatchedFilms.favorite == True))
            result = await session.execute(stmt)
            favorite_films = result.scalars().all()
            stmt = select(WatchedSerials).where(
                (WatchedSerials.id_user == str(message.from_user.id)) & (WatchedSerials.favorite == True))
            result = await session.execute(stmt)
            favorite_serials = result.scalars().all()
    await message.answer(f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å, {message.from_user.full_name} üë§\n"
                         f"–ö–æ–ª-–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤: {len(films)}üé¨\n"
                         f"–ö–æ–ª-–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö —Å–µ—Ä–∏–∞–ª–æ–≤: {len(serials)//10}üé¨\n"
                         f"–ö–æ–ª-–≤–æ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤: {len(favorite_films)}üé¨\n"
                         f"–ö–æ–ª-–≤–æ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Å–µ—Ä–∏–∞–ª–æ–≤: {len(favorite_serials)}üé¨\n"
                         f"–í–∞—à–∏ –ª—é–±–∏–º—ã–µ –∂–∞–Ω—Ä—ã: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç üìÑ")


#------------------–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å–º—ã/—Å–µ—Ä–∏–∞–ª—ã----------------------
@router.message(F.text == '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å–º—ã/—Å–µ—Ä–∏–∞–ª—ã üì∫')
async def check_viewed(message: Message):
    await message.answer('–í—ã–±–µ—Ä–∏ —Ñ–∏–ª—å–º/—Å–µ—Ä–∏–∞–ªüì∫üçø', reply_markup=viewed_keyboard())


#------------------–ò–∑–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å–º—ã/—Å–µ—Ä–∏–∞–ª—ã----------------------
@router.message(F.text == '–ò–∑–±—Ä–∞–Ω–Ω–æ–µ ‚≠êÔ∏è')
async def check_favorite(message: Message):
    await message.answer('–í—ã–±–µ—Ä–∏ üì∫üçø', reply_markup=get_favorite_media())


@router.callback_query(lambda call: call.data == 'vfilms' or call.data == 'vserials')
async def get_viewed(callback: CallbackQuery):
    id_user = str(callback.from_user.id)
    async with Session() as session:
        async with session.begin():
            if callback.data == 'vfilms':
                # –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                stmt = select(Films.name).join(WatchedFilms, Films.id == WatchedFilms.id_film).where(
                    (WatchedFilms.id_user == id_user) & (WatchedFilms.watched == True)
                )
            else:
                # –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö —Å–µ—Ä–∏–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                stmt = select(Serials.name).join(WatchedSerials, Serials.id == WatchedSerials.id_serial).where(
                    (WatchedSerials.id_user == id_user) & (WatchedSerials.watched == True)
                )
            result = await session.execute(stmt)
            viewed_items = result.scalars().all()
    if callback.data == 'vfilms':
        message_text = "–í–∞—à–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å–º—ã:\n" + "\n".join(viewed_items)
    else:
        message_text = "–í–∞—à–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ —Å–µ—Ä–∏–∞–ª—ã:\n" + "\n".join(viewed_items)

    await callback.message.answer(message_text)


@router.callback_query(lambda call: call.data == 'films' or call.data == 'serials')
async def callback_query_handler_films(callback: CallbackQuery) -> None:
    if callback.data[0] == 'f':
        await callback.message.edit_text('–ö–∞–∫–æ–π –∂–∞–Ω—Ä? üé•', reply_markup=films_keyboard(False))
    else:
        await callback.message.edit_text('–ö–∞–∫–æ–π –∂–∞–Ω—Ä? üé•', reply_markup=serials_keyboard(False))


@router.callback_query(lambda call: call.data[0] == 'f' or call.data[0] == 's')
async def call_random_media_with_genre(callback: CallbackQuery, type_media: str = '', genre_id: str = ''):
    if not type_media:
        type_media = callback.data[0]
        genre_id = callback.data[1:]
    async with Session() as session:
        async with session.begin():
            subquery = select(WatchedFilms.id_film).where(
                (WatchedFilms.id_user == str(callback.from_user.id)) & ((WatchedFilms.watched == True) | (WatchedFilms.interesting == False))
            ) if type_media == 'f' else select(WatchedSerials.id_serial).where(
                (WatchedSerials.id_user == str(callback.from_user.id)) & ((WatchedSerials.watched == True) | (WatchedSerials.interesting == False))
            )

            stmt = select(Films).where(
                (Films.genre == genre_id) & (Films.id.notin_(subquery))
            ).order_by(func.random()).limit(1) if type_media == 'f' else select(Serials).where(
                (Serials.genre == genre_id) & (Serials.id.notin_(subquery))
            ).order_by(func.random()).limit(1)

            result = await session.execute(stmt)
            media = result.scalar_one_or_none()

            stmt = select(User).filter_by(id_user=str(callback.from_user.id))
            result = await session.execute(stmt)
            user = result.scalars().first()

            if type_media == 'f':
                user.film_id = media.id
                user.genre_id = genre_id
            else:
                user.serial_id = media.id
                user.genre_id = genre_id

            await session.commit()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if media:
        message_text = (
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {media.name} üé¨\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {media.overview[:900] if media.overview else '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n"
            f"–†–µ–π—Ç–∏–Ω–≥: {round(media.rating, 1)}‚≠êÔ∏è\n"
            f"–î–∞—Ç–∞ –≤—ã—Ö–æ–¥–∞: {datetime.strftime(media.release_date, '%d-%m-%Y')} üìÖ"
        )
    else:
        message_text = ('–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ñ–∏–ª—å–º/—Å–µ—Ä–∏–∞–ª.\n–í–æ–∑–º–æ–∂–Ω–æ –∫–æ–ª-–≤–æ —Ñ–∏–ª—å–º–æ–≤/—Å–µ—Ä–∏–∞–ª–æ–≤ –ø–æ —ç—Ç–æ–º—É –∂–∞–Ω—Ä—É –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å')
    if type_media == 'f':
        await callback.message.answer_photo(media.poster, caption=message_text, reply_markup=films_keyboard(True))
    else:
        await callback.message.answer_photo(media.poster, caption=message_text, reply_markup=serials_keyboard(True))


@router.callback_query(F.data[2:] == 'back')
async def back(callback: CallbackQuery):
    if callback.data[1] == 'f':
        await callback.message.answer('–ö–∞–∫–æ–π –∂–∞–Ω—Ä? üé•', reply_markup=films_keyboard(False))
    else:
        await callback.message.answer('–ö–∞–∫–æ–π –∂–∞–Ω—Ä? üé•', reply_markup=serials_keyboard(False))


@router.callback_query(lambda call: call.data == 'mfwatched' or call.data == 'mswatched' or
                                    call.data == 'lffavorite' or call.data == 'lsfavorite' or
                       call.data == 'nonfinteresting' or call.data == 'nonsinteresting')
async def watched_film(callback: CallbackQuery):
    id_user = str(callback.from_user.id)
    async with Session() as session:
        async with session.begin():
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            stmt = select(User).filter_by(id_user=id_user)
            result = await session.execute(stmt)
            user = result.scalars().first()
            genre_id = user.genre_id
            if callback.data[1:3] == 'fw':
                watched_film = WatchedFilms(id_film=user.film_id, id_user=id_user, watched=True)
                session.add(watched_film)
            if callback.data[1:3] == 'sw':
                watched_serial = WatchedSerials(id_serial=user.serial_id, id_user=id_user, watched=True)
                session.add(watched_serial)
            if callback.data[1:3] == 'ff':
                favorite_film = WatchedFilms(id_film=user.film_id, id_user=id_user, favorite=True)
                session.add(favorite_film)
            if callback.data[1:3] == 'sf':
                favorite_serial = WatchedSerials(id_serial=user.serial_id, id_user=id_user, favorite=True)
                session.add(favorite_serial)
            if callback.data[3:5] == 'fi':
                favorite_film = WatchedFilms(id_film=user.film_id, id_user=id_user, interesting=False)
                session.add(favorite_film)
            if callback.data[3:5] == 'si':
                favorite_serial = WatchedSerials(id_serial=user.serial_id, id_user=id_user, favorite=False)
                session.add(favorite_serial)
            user.film_id = None
            user.genre_id = None
            user.serial_id = None
        await session.commit()
    if callback.data[1] == 'f' or callback.data[3] == 'f':
        await call_random_media_with_genre(callback, 'f', genre_id)
    else:
        await call_random_media_with_genre(callback, 's', genre_id)


@router.callback_query(F.data == 'menu')
async def go_to_main_menu(callback: CallbackQuery):
    await callback.message.answer(f"–í—ã–±–µ—Ä–∏, —á—Ç–æ –±—É–¥–µ—à—å —Å–º–æ—Ç—Ä–µ—Ç—å, –∏ —è –Ω–∞–π–¥—É –¥–ª—è —Ç–µ–±—è —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ! üì∫üçø",
                                  reply_markup=choise_keyboard())


@router.callback_query(lambda call: call.data == 'jffilms' or call.data == 'jfserials')
async def go_to_favorite_list(callback: CallbackQuery):
    id_user = str(callback.from_user.id)
    async with Session() as session:
        async with session.begin():
            if callback.data == 'jffilms':
                # –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                stmt = select(Films.name, Films.genre_name).join(WatchedFilms, Films.id == WatchedFilms.id_film).where(
                    (WatchedFilms.id_user == id_user) & (WatchedFilms.favorite == True)
                )
            else:
                # –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Å–µ—Ä–∏–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                stmt = select(Serials.name, Serials.genre_name).join(WatchedSerials,
                                                                     Serials.id == WatchedSerials.id_serial).where(
                    (WatchedSerials.id_user == id_user) & (WatchedSerials.favorite == True)
                )
            result = await session.execute(stmt)
            viewed_items = result.all()

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    if callback.data == 'jffilms':
        message_text = "–í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å–º—ã:\n"
        for name, genre_name in viewed_items:
            message_text += f"{name} (–ñ–∞–Ω—Ä: {genre_name})\n"
    else:
        message_text = "–í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Å–µ—Ä–∏–∞–ª—ã:\n"
        for name, genre_name in viewed_items:
            message_text += f"{name} (–ñ–∞–Ω—Ä: {genre_name})\n"

    await callback.message.answer(message_text)

@router.message(F.text)
async def uncorrect_command(message: Message):
    if message.text not in ['–í—ã–±–æ—Ä —Ñ–∏–ª—å–º–∞/—Å–µ—Ä–∏–∞–ª–∞ üéûÔ∏è', 'üë§–ü—Ä–æ—Ñ–∏–ª—å', '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å–º—ã/—Å–µ—Ä–∏–∞–ª—ã', '–ò–∑–±—Ä–∞–Ω–Ω–æ–µ ‚≠êÔ∏è']:
        await message.answer('–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∫–æ–º–∞–Ω–¥–∞ üò¢')
        await message.answer(f"–í—ã–±–µ—Ä–∏, —á—Ç–æ –±—É–¥–µ—à—å —Å–º–æ—Ç—Ä–µ—Ç—å, –∏ —è –Ω–∞–π–¥—É –¥–ª—è —Ç–µ–±—è —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ! üì∫üçø",
                                      reply_markup=choise_keyboard())