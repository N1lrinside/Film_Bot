from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery
from keyboards import main_keyboard, films_keyboard, serials_keyboard, choise_keyboard
from models import Films, Session, Serials, User, WatchedFilms
from sqlalchemy import func
from sqlalchemy.future import select
from datetime import datetime

router = Router()
data = {}


@router.message(CommandStart())
async def command_start(message: Message) -> None:
    await message.answer(f"üé¨ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ñ–∏–ª—å–º—ã –∏ —Å–µ—Ä–∏–∞–ª—ã. ", reply_markup=main_keyboard())


@router.message(F.text == '–í—ã–±–æ—Ä —Ñ–∏–ª—å–º–∞/—Å–µ—Ä–∏–∞–ª–∞ üéûÔ∏è')
async def command_start_handler(message: Message) -> None:
    await message.answer(f"–í—ã–±–µ—Ä–∏, —á—Ç–æ –±—É–¥–µ—à—å —Å–º–æ—Ç—Ä–µ—Ç—å, –∏ —è –Ω–∞–π–¥—É –¥–ª—è —Ç–µ–±—è —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ! üì∫üçø", reply_markup=choise_keyboard())


@router.message(F.text == 'üë§–ü—Ä–æ—Ñ–∏–ª—å')
async def get_profile_user(message: Message):
    await message.answer(f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å, {message.from_user.full_name} üë§"
                         f"–ö–æ–ª-–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤: 0 üé¨"
                         f"–í–∞—à–∏ –ª—é–±–∏–º—ã–µ –∂–∞–Ω—Ä—ã: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç üìÑ")


@router.callback_query(F.data == 'films')
async def callback_query_handler_films(query: CallbackQuery) -> None:
    await query.message.edit_text('–ö–∞–∫–æ–π –∂–∞–Ω—Ä? üé•', reply_markup=films_keyboard())


@router.callback_query(F.data == 'serials')
async def callback_query_handler_serials(query: CallbackQuery) -> None:
    await query.message.edit_text('–ö–∞–∫–æ–π –∂–∞–Ω—Ä? üé•', reply_markup=serials_keyboard())


@router.callback_query(lambda call: call.data[0] == 'f' or call.data[0] == 's')
async def random_films_or_serials(query: CallbackQuery) -> None:
    type_media = query.data[0]
    genre_id = query.data[1:]
    stmt = select(Films).where(Films.genre == genre_id).order_by(func.random()).limit(1) if type_media == 'f' \
        else select(Serials).where(Serials.genre == genre_id).order_by(func.random()).limit(1)
    result = await Session.execute(stmt)
    vse_films = result.scalar_one_or_none()

    message_text = (
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {vse_films.name} üé¨\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {vse_films.overview[:900]}\n"
            f"–†–µ–π—Ç–∏–Ω–≥: {vse_films.rating}‚≠êÔ∏è\n"
            f"–î–∞—Ç–∞ –≤—ã—Ö–æ–¥–∞: {datetime.strftime(vse_films.release_date, '%d-%m-%Y')} üìÖ"
        )

    if type_media == 'f':
        await query.message.answer_photo(vse_films.poster, caption=message_text, reply_markup=films_keyboard())
        data[query.from_user.id] = {
            'film_id': vse_films.id,
            'genre_id': vse_films.genre
        }
    else:
        await query.message.answer_photo(vse_films.poster, caption=message_text, reply_markup=serials_keyboard())
    Session.close()


@router.callback_query(F.data == 'back')
async def back(callback: CallbackQuery):
    await callback.message.answer(f'–í—ã–±–µ—Ä–∏, —á—Ç–æ –±—É–¥–µ—à—å —Å–º–æ—Ç—Ä–µ—Ç—å, –∏ —è –Ω–∞–π–¥—É –¥–ª—è —Ç–µ–±—è —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ! üì∫üçø',
                                  reply_markup=choise_keyboard())
